from docx import Document
from io import BytesIO
from typing import Dict, Optional
import os
import json
from core.claude_client import get_claude_client

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATE_FOLDER = os.path.join(BASE_DIR, "../templates")


def autofill_placeholders(template_name: str, tender_result: dict) -> dict:
    client = get_claude_client()
    if not client:
        return {}  # fallback: empty dict

    prompt = f"""
    –í–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç —ñ–∑ –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö –∑–∞–∫—É–ø—ñ–≤–µ–ª—å. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–µ–Ω–¥–µ—Ä—É —Ç–∞ –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ JSON-—Å–ª–æ–≤–Ω–∏–∫ –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.

    –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É: {template_name}

    –í–∏—Ç—è–≥ –∑ –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–Ω–¥–µ—Ä—É:
    {json.dumps(tender_result, ensure_ascii=False, indent=2)}

    –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ JSON-–æ–±'—î–∫—Ç, –¥–µ –∫–ª—é—á—ñ ‚Äî —Ü–µ –Ω–∞–∑–≤–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ —É —à–∞–±–ª–æ–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <Tender Title>), –∞ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –≤—Å—Ç–∞–≤–∫–∏.
    """

    try:
        response = client.messages.create(
            model="claude-3-opus-20240229",
            max_tokens=500,
            temperature=0.2,
            messages=[{"role": "user", "content": prompt}]
        )
        return json.loads(response.content[0].text)
    except Exception as e:
        print("‚ùå Claude response parsing failed:", e)
        return {}


def generate_filled_template(template_filename: str, tender_result: Optional[Dict] = None) -> BytesIO:
    if not tender_result:
        raise ValueError("Missing tender_result")

    # üß† Generate values from Claude
    values = autofill_placeholders(template_filename, tender_result)

    # üìÇ Load template DOCX
    path = os.path.join(TEMPLATE_FOLDER, f"{template_filename}.docx")
    if not os.path.exists(path):
        raise FileNotFoundError(f"Template not found: {path}")

    doc = Document(path)

    # üìù Replace in paragraphs
    for p in doc.paragraphs:
        for run in p.runs:
            for key, val in values.items():
                if f"<{key}>" in run.text:
                    run.text = run.text.replace(f"<{key}>", val)

    # üìù Replace in tables
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for key, val in values.items():
                    if f"<{key}>" in cell.text:
                        cell.text = cell.text.replace(f"<{key}>", val)

    # üì§ Return as BytesIO
    output = BytesIO()
    doc.save(output)
    output.seek(0)
    return output
